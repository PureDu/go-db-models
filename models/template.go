package models

const (
	// 生成的数据表的文件的模版: gen_table_*.go
	codeTemplate = `// DON'T EDIT *** generated by go-db-models *** DON'T EDIT //
package {{.PackageName}}

{{range $k, $v := .Imports}}
import "{{$v}}"{{end}}
import "strings"
import "database/sql"

// 对应数据表：{{.Name}}
type {{.Name|Format2StructName}}Table struct { 
{{range $k, $v := .Fields}}
{{$v.Name|Format2StructName}}  {{$v.Type}} {{$v.Name|Format2StructTag}}{{end}}
}

const {{.Name|Format2Title}}SelectFields string = "{{.SelectFields}}"

// 查询单行记录
func {{.Name|Format2StructName}}QueryRow(db *sql.DB, queryString string) ({{.Name}} *{{.Name|Format2StructName}}Table, err error) {
	queryString = strings.Replace(queryString, SelectFieldsTemp, {{.Name|Format2Title}}SelectFields, 1)
	{{.Name}} = &{{.Name|Format2StructName}}Table{}
	err = db.QueryRow(queryString).Scan( {{range $k, $v := .Fields}}
		&{{$.Name}}.{{$v.Name|Format2StructName}},{{end}}
	)

	if err != nil {
		return nil, err
	}

	return {{.Name}}, nil
}

// 查询多行记录
func {{.Name|Format2StructName}}Query(db *sql.DB, queryString string) ({{.Name}} []*{{.Name|Format2StructName}}Table, err error) {
	queryString = strings.Replace(queryString, SelectFieldsTemp, {{.Name|Format2Title}}SelectFields, 1)
	rows, err := db.Query(queryString)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var one_row = &{{.Name|Format2StructName}}Table{}
		err = rows.Scan( {{range $k, $v := .Fields}}
			&one_row.{{$v.Name|Format2StructName}},{{end}}
		)
		if err != nil {
			return nil, err
		}

		{{.Name}} = append({{.Name}}, one_row)
	}

	return {{.Name}}, nil
}
`
	// 生成的gen_common.go文件的模版
	commonCodeTemplate = `// DON'T EDIT *** generated by go-db-models *** DON'T EDIT //
package {{.PackageName}}

const (
	SelectFieldsTemp string = "{select-fields-temp}"
)
`
)
