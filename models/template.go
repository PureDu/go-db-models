package models

const (
	// 生成的数据表的文件的模版: gen_table_*.go
	codeTemplate = `// DON'T EDIT *** generated by go-db-models *** DON'T EDIT //
package {{.PackageName}}

{{range $k, $v := .Imports}}
import "{{$v}}"{{end}}
import "strings"
import "database/sql"

// 对应数据表：{{.Name}}
type {{.Name|Format2StructName}}Table struct { 
{{range $k, $v := .Fields}}
{{$v.Name|Format2StructName}}  {{$v.Type}} {{$v.Name|Format2StructTag}}{{end}}
}

const {{.Name|Format2Title}}SelectFields string = " {{.SelectFields}} "

{{if .QueryBy.FieldName}}
// 查询单行记录（根据某个字段）
func {{.Name|Format2StructName}}QueryBy{{.QueryBy.FieldName|Format2StructName}}(db *sql.DB, {{.QueryBy.FieldName|Format2Title}}Val {{.QueryBy.FieldType}}) ({{.Name}} *{{.Name|Format2StructName}}Table, err error) {
	queryString := "SELECT " + {{.Name|Format2Title}}SelectFields + " FROM {{.Name|AddBackquote}} WHERE {{.QueryBy.FieldName|AddBackquote}} = ?"
	{{.Name}} = &{{.Name|Format2StructName}}Table{}
	err = db.QueryRow(queryString, {{.QueryBy.FieldName|Format2Title}}Val).Scan( {{range $k, $v := .Fields}}
		&{{$.Name}}.{{$v.Name|Format2StructName}},{{end}}
	)

	if err != nil {
		return nil, err
	}

	return {{.Name}}, nil
}
{{end}}

// 查询单行记录
func {{.Name|Format2StructName}}QueryRowWhere(db *sql.DB, where string) ({{.Name}} *{{.Name|Format2StructName}}Table, err error) {
	queryString := "SELECT " + {{.Name|Format2Title}}SelectFields + " FROM {{.Name|AddBackquote}} WHERE " + where
	return do{{.Name|Format2StructName}}QueryRow(db, queryString)
}

// 查询单行记录
func {{.Name|Format2StructName}}QueryRow(db *sql.DB, queryString string) ({{.Name}} *{{.Name|Format2StructName}}Table, err error) {
	queryString = strings.Replace(queryString, SelectFieldsTemp, {{.Name|Format2Title}}SelectFields, 1)
	return do{{.Name|Format2StructName}}QueryRow(db, queryString)
}

// 查询单行记录
func do{{.Name|Format2StructName}}QueryRow(db *sql.DB, queryString string) ({{.Name}} *{{.Name|Format2StructName}}Table, err error) {
	{{.Name}} = &{{.Name|Format2StructName}}Table{}
	err = db.QueryRow(queryString).Scan( {{range $k, $v := .Fields}}
		&{{$.Name}}.{{$v.Name|Format2StructName}},{{end}}
	)

	if err != nil {
		return nil, err
	}

	return {{.Name}}, nil
}

// 查询多行记录
func {{.Name|Format2StructName}}QueryWhere(db *sql.DB, where string) ({{.Name}} []*{{.Name|Format2StructName}}Table, err error) {
	queryString := "SELECT " + {{.Name|Format2Title}}SelectFields + " FROM {{.Name|AddBackquote}} WHERE " + where
	return do{{.Name|Format2StructName}}Query(db, queryString)
}

// 查询多行记录
func {{.Name|Format2StructName}}Query(db *sql.DB, queryString string) ({{.Name}} []*{{.Name|Format2StructName}}Table, err error) {
	queryString = strings.Replace(queryString, SelectFieldsTemp, {{.Name|Format2Title}}SelectFields, 1)
	return do{{.Name|Format2StructName}}Query(db, queryString)
}

// 查询多行记录（执行）
func do{{.Name|Format2StructName}}Query(db *sql.DB, queryString string) ({{.Name}} []*{{.Name|Format2StructName}}Table, err error) {
	rows, err := db.Query(queryString)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var oneRow = &{{.Name|Format2StructName}}Table{}
		err = rows.Scan( {{range $k, $v := .Fields}}
			&oneRow.{{$v.Name|Format2StructName}},{{end}}
		)
		if err != nil {
			return nil, err
		}

		{{.Name}} = append({{.Name}}, oneRow)
	}

	return {{.Name}}, nil
}
`
	// 生成的gen_common.go文件的模版
	commonCodeTemplate = `// DON'T EDIT *** generated by go-db-models *** DON'T EDIT //
package {{.PackageName}}

const (
	SelectFieldsTemp string = "{select-fields-temp}"
)
`
)
